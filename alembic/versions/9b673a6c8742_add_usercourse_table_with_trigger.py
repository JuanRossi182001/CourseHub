"""Add usercourse table with trigger

Revision ID: 9b673a6c8742
Revises: 42ac8f1fbc3f
Create Date: 2024-11-05 18:12:24.576470

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9b673a6c8742'
down_revision: Union[str, None] = '42ac8f1fbc3f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('usercourse',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'course_id')
    )
    
     # Crear la función para el trigger
    op.execute("""
    CREATE OR REPLACE FUNCTION add_user_course()
    RETURNS TRIGGER AS $$
    BEGIN
        INSERT INTO usercourse (user_id, course_id) 
        VALUES (NEW.user_id, NEW.course_id);
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)
    
    # Crear el trigger que usa la función add_user_course
    op.execute("""
    CREATE TRIGGER trigger_add_user_course
    AFTER INSERT ON payment
    FOR EACH ROW
    EXECUTE FUNCTION add_user_course();
    """)
    
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Eliminar el trigger y la función
    op.execute("DROP TRIGGER IF EXISTS trigger_add_user_course ON payment;")
    op.execute("DROP FUNCTION IF EXISTS add_user_course;")
    op.drop_table('usercourse')
    # ### end Alembic commands ###
